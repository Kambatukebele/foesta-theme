<form class="w-full h-fit py-12 lg:py-24">
  <div class="container px-4">
    <!-- Filter bar on small and large screen -->
    <div class="min-w-[280px] flex justify-between items-center md:bg-gray-200 md:px-4 md:py-3 md:rounded-sm">
      <!-- filter on small device -->
      <div id="filterOnSmall" class="flex justify-start items-center gap-2 bg-gray-200 px-4 py-3 rounded-sm lg:hidden">
        <span class="block w-4 "> {{ 'icon-filter.svg' | inline_asset_content }}</span>
        <span class="text-base text-gray-950 font-normal">Filter and sort</span>
      </div>
      <!-- End filter on small device -->
      <!-- filter 2,3,4 bar to display products grid -->
      <div class="hidden lg:flex lg:justify-center lg:items-center lg:gap-4">
        <span class="cursor-pointer block w-2 icon-grid-select">{{ 'icon-2bar.svg' | inline_asset_content }}</span>
        <span class="cursor-pointer block w-3.5 icon-grid-select">{{ 'icon-3bar.svg' | inline_asset_content }}</span>
        <span class="cursor-pointer block w-5 icon-grid-select">{{ 'icon-4bar.svg' | inline_asset_content }}</span>
      </div>
      <!-- End filter 2,3,4 bar to display products grid -->
      <div class="lg:flex lg:justify-center lg:items-center lg:gap-10">
        <div class="hidden lg:flex lg:justify-center lg:items-center lg:gap-1">
          {%- assign sortBy = collection.sort_by | default: collection.default_sort_by -%}
          <span>Sort by:</span>
          <select id="sortSelect">
            {%- for option in collection.sort_options -%}
              <option
                value="{{ option.value }}"
                {%- if option.value == sortBy %}
                  selected="selected"
                {% endif -%}
              >
                {{ option.name }}
              </option>
            {%- endfor -%}
          </select>
        </div>
        <span class="text-base text-gray-950 font-medium w-fit">{{ collection.all_products_count }} Products</span>
      </div>
    </div>
    <div class="lg:flex lg:justify-between lg:items-start">
      <!-- Filter on large screen -->
      <div class="hidden lg:block lg:w-1/5 lg:shadow lg:mt-10">
        <!-- Loop here -->
        {%- for filter in collection.filters -%}
          <div>
            <div class="lg:w-full lg:flex lg:justify-between lg:items-center lg:py-3 lg:px-1 lg:bg-gray-100">
              <span class="lg:block">{{ filter.label }}</span>
              <span class="lg:block">{{ 'icon-chevron.svg' | inline_asset_content }}</span>
            </div>
            <!-- filter inputs -->
            <div class="hidden lg:flex lg:flex-col lg:justify-center lg:items-start lg:gap-3 lg:py-3 lg:px-2 lg:h-fit">
              <!-- Loop sub param filter on large -->
              <!--  -->
              {%- case filter.type -%}
                {%- when 'list' -%}
                  {% for filter_value in filter.values %}
                    <div class="hidden lg:flex lg:justify-center lg:items-center lg:gap-2">
                      <input
                        type="checkbox"
                        name="{{ filter_value.param_name }}"
                        value="{{ filter_value.value }}"
                        id="Filter-{{ filter.param_name }}-{{ forloop.index }}"
                        {% if filter_value.active %}
                          checked
                        {% endif -%}
                        {% if filter_value.count == 0 and filter_value.active == false %}
                          disabled
                        {% endif %}
                      >
                      <label
                        for="Filter-{{ filter.param_name }}-{{ forloop.index }}"
                        class="hidden lg:block lg:text-base"
                      >
                        {{- filter_value.label | capitalize }}
                        (
                        {{- filter_value.count -}}
                        )
                      </label>
                    </div>
                  {% endfor %}
                {%- when 'price_range' -%}
                  <div class="hidden lg:flex lg:flex-col lg:justify-center lg:items-center gap-3">
                    <div class="lg:w-full lg:flex lg:justify-center items-end">
                      <label class="w-20" for="Filter-{{ filter.min_value.param_name }}">From</label>
                      <div class="lg:w-full lg:flex lg:justify-center lg:items-center gap-3">
                        <span class="lg:block lg:w-5">{{ cart.currency.symbol }}</span>
                        <input
                          class="w-20 block border border-gray-100 rounded-sm px-3"
                          name="{{ filter.min_value.param_name }}"
                          id="Filter-{{ filter.min_value.param_name }}"
                          {% if filter.min_value.value %}
                            value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                          {% endif %}
                          type="number"
                          placeholder="0"
                          min="0"
                          max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                        >
                      </div>
                    </div>

                    <div class="lg:w-full lg:flex lg:justify-center items-end">
                      <label class="w-20" for="Filter-{{ filter.max_value.param_name }}">To</label>
                      <div class="lg:w-full lg:flex lg:justify-center lg:items-center gap-3">
                        <span class="lg:block lg:w-5">{{ cart.currency.symbol }}</span>
                        <input
                          class="w-20 block border border-gray-100 rounded-sm px-3"
                          name="{{ filter.max_value.param_name }}"
                          id="Filter-{{ filter.max_value.param_name }}"
                          {% if filter.max_value.value %}
                            value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                          {% endif %}
                          type="number"
                          placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                          min="0"
                          max="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                        >
                      </div>
                    </div>
                  </div>
              {%- endcase -%}
              <!-- Loop sub param filter on large -->
            </div>
            <!-- End filter inputs -->
          </div>
        {%- endfor -%}
        {% comment %}
          <div>
            <input type="submit" value="Apply">
          </div>
        {% endcomment %}
      </div>
      <!-- End Filter on large screen -->
      <!-- Product card -->
      <div
        id="productCards"
        class="w-full mt-5 grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:max-w-3/4 lg:mt-10 lg:grid-cols-4"
      >
        {%- if collection.products != blank -%}
          {%- for product in collection.products -%}
            {%- assign productImage = product.featured_image
              | image_url: width: 1000
              | image_tag: class: 'w-[280px] h-80 sm:w-80 object-center object-cover rounded-lg lg:w-full lg:h-[500px]'
            -%}
            {% render 'product-card',
              productCardWidth: 'rounded-2xl min-w-[280px] md:min-w-full lg:w-full',
              productIMage: productImage,
              productTitle: product.title,
              productPrice: product.price,
              productPriceComparison: product.compare_at_price,
              productButtonURL: product.url,
              productButtonText: 'Add to cart'
            %}
          {%- endfor -%}
        {% else %}
          <div class="w-[500px] flex justify-start items-center">
            <h2 class="text-2xl font-semibold">No products found</h2>
          </div>
        {%- endif -%}
      </div>
      <!-- End Product card -->
    </div>

    <!-- Product drawer card -->
    <div
      id="collectionDrawer"
      class="w-[300px] duration-700 ease-in-out px-4 bg-white shadow-2xl h-screen fixed top-0 -right-[3000px] z-10 flex justify-between items-center flex-col"
    >
      <div class="w-full h-20 flex justify-end items-center border-b-gray-200 border-b">
        <div class="w-full flex flex-col justify-center items-center gap-1">
          <span>Filter and sort</span>
          <span>{{ collection.all_products_count }} products</span>
        </div>
        <!-- close drawer -->
        <span id="closeCollectionDrawer" class="block w-8 h-8">{{ 'icon-close.svg' | inline_asset_content }}</span>
        <!-- End close drawer -->
      </div>
      <!-- filter params -->
      <div class="w-full h-[calc(100vh-10rem)] z-50 flex flex-col gap-3.5 py-5 overflow-y-scroll">
        <!-- Loop filter params here -->
        {% for filter in collection.filters %}
          <div class="flex justify-between items-center border border-gray-200 shadow-sm rounded-lg py-4 px-4">
            <span>{{ filter.label }}</span>
            <span class="block w-4 h-4">{{ 'icon-arrow-right.svg' | inline_asset_content }}</span>
          </div>
        {% endfor %}
      </div>
      <!-- End filter params -->
      <!-- sub filter params -->
      <div class="hidden">
        <div>
          <span class="block w-8 h-8">{{ 'icon-arrow-right.svg' | inline_asset_content }}</span>
          <span>Availability</span>
        </div>
        <div>
          <div>
            <input type="checkbox">
            <label>In stock</label>
          </div>
          <div>
            <input type="checkbox">
            <label>Out of stock</label>
          </div>
        </div>
      </div>
      <!-- End sub filter params -->
      <!-- Remove and apply params -->
      <div class="w-full h-20 flex justify-between items-center border-t border-gray-200">
        <span class="underline">Remove all</span>
        <span>Apply</span>
      </div>
      <!-- End Remove and apply params -->
    </div>
    <!-- Product drawer card -->
  </div>
</form>

<script>
  //This function helping to open and close the drawer filter on small devices
  const showFilterDrawerOnSmallDevice = () => {
    const filterOneSmall = document.querySelector('#filterOnSmall'); // target the filter and sort on small device
    const collectionDrawer = document.querySelector('#collectionDrawer'); // target the collection drawer that contains the filter
    const closeCollectionDrawer = document.querySelector('#closeCollectionDrawer'); //target the close icon to close the collection drawer
    function openCloseDrawer() {
      if (collectionDrawer.classList.contains('-right-[3000px]')) {
        collectionDrawer.classList.remove('-right-[3000px]');
        collectionDrawer.classList.add('right-0');
      } else {
        collectionDrawer.classList.add('-right-[3000px]');
        collectionDrawer.classList.remove('right-0');
      }
    }
    filterOneSmall.addEventListener('click', openCloseDrawer);
    closeCollectionDrawer.addEventListener('click', openCloseDrawer);
  };
  showFilterDrawerOnSmallDevice();

  //This function helping to display products in 2 or 3 or 4 columns by click
  const displayColumnsProductGrid = () => {
    const iconSelect = document.querySelectorAll('.icon-grid-select'); // Capturing the icons
    const productCards = document.querySelector('#productCards'); // Capturing the section that contains all the product cards
    const grids = ['lg:grid-cols-2', 'lg:grid-cols-3', 'lg:grid-cols-4']; // Class options for grid layout

    iconSelect.forEach((icon, index) => {
      icon.addEventListener('click', () => {
        // Remove any existing grid class
        grids.forEach((grid) => productCards.classList.remove(grid));
        // Add the selected grid class
        if (index >= 0 && index < grids.length) {
          productCards.classList.add(grids[index]);
        }
      });
    });
  };
  displayColumnsProductGrid();

  // Filtering data automatically on click
  const filteringData = () => {
    //For the inputs with checkbox
    document.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
      checkbox.addEventListener('change', function () {
        let params = new URLSearchParams(window.location.search);

        if (this.checked) {
          params.append(this.name, this.value); // Add filter to URL
        } else {
          params.delete(this.name); // Remove filter if unchecked
        }

        window.location.href = window.location.pathname + '?' + params.toString(); // Reload with new URL
      });
    });
    // for the select input
    document.getElementById('sortSelect').addEventListener('change', function () {
      let params = new URLSearchParams(window.location.search);

      // Set or update the sort parameter in the URL
      params.set('sort_by', this.value); // Adjust parameter name as needed

      // Update the URL and reload the page with the new query string
      window.location.href = window.location.pathname + '?' + params.toString();
    });
  };
  filteringData();
</script>
